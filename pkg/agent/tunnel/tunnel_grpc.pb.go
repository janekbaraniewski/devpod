// protoc -I . tunnel.proto  --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: tunnel.proto

package tunnel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Tunnel_Ping_FullMethodName              = "/tunnel.Tunnel/Ping"
	Tunnel_Log_FullMethodName               = "/tunnel.Tunnel/Log"
	Tunnel_SendResult_FullMethodName        = "/tunnel.Tunnel/SendResult"
	Tunnel_DockerCredentials_FullMethodName = "/tunnel.Tunnel/DockerCredentials"
	Tunnel_GitCredentials_FullMethodName    = "/tunnel.Tunnel/GitCredentials"
	Tunnel_GitSSHSignature_FullMethodName   = "/tunnel.Tunnel/GitSSHSignature"
	Tunnel_GitUser_FullMethodName           = "/tunnel.Tunnel/GitUser"
	Tunnel_ForwardPort_FullMethodName       = "/tunnel.Tunnel/ForwardPort"
	Tunnel_StopForwardPort_FullMethodName   = "/tunnel.Tunnel/StopForwardPort"
	Tunnel_StreamGitClone_FullMethodName    = "/tunnel.Tunnel/StreamGitClone"
	Tunnel_StreamWorkspace_FullMethodName   = "/tunnel.Tunnel/StreamWorkspace"
	Tunnel_StreamMount_FullMethodName       = "/tunnel.Tunnel/StreamMount"
)

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Log(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*Empty, error)
	SendResult(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
	DockerCredentials(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	GitCredentials(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	GitSSHSignature(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	GitUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error)
	ForwardPort(ctx context.Context, in *ForwardPortRequest, opts ...grpc.CallOption) (*ForwardPortResponse, error)
	StopForwardPort(ctx context.Context, in *StopForwardPortRequest, opts ...grpc.CallOption) (*StopForwardPortResponse, error)
	StreamGitClone(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Tunnel_StreamGitCloneClient, error)
	StreamWorkspace(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Tunnel_StreamWorkspaceClient, error)
	StreamMount(ctx context.Context, in *StreamMountRequest, opts ...grpc.CallOption) (Tunnel_StreamMountClient, error)
}

type tunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClient(cc grpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Tunnel_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) Log(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Tunnel_Log_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) SendResult(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Tunnel_SendResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) DockerCredentials(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Tunnel_DockerCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GitCredentials(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Tunnel_GitCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GitSSHSignature(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Tunnel_GitSSHSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GitUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Tunnel_GitUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) ForwardPort(ctx context.Context, in *ForwardPortRequest, opts ...grpc.CallOption) (*ForwardPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardPortResponse)
	err := c.cc.Invoke(ctx, Tunnel_ForwardPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) StopForwardPort(ctx context.Context, in *StopForwardPortRequest, opts ...grpc.CallOption) (*StopForwardPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopForwardPortResponse)
	err := c.cc.Invoke(ctx, Tunnel_StopForwardPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) StreamGitClone(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Tunnel_StreamGitCloneClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tunnel_ServiceDesc.Streams[0], Tunnel_StreamGitClone_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelStreamGitCloneClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tunnel_StreamGitCloneClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type tunnelStreamGitCloneClient struct {
	grpc.ClientStream
}

func (x *tunnelStreamGitCloneClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tunnelClient) StreamWorkspace(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Tunnel_StreamWorkspaceClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tunnel_ServiceDesc.Streams[1], Tunnel_StreamWorkspace_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelStreamWorkspaceClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tunnel_StreamWorkspaceClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type tunnelStreamWorkspaceClient struct {
	grpc.ClientStream
}

func (x *tunnelStreamWorkspaceClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tunnelClient) StreamMount(ctx context.Context, in *StreamMountRequest, opts ...grpc.CallOption) (Tunnel_StreamMountClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tunnel_ServiceDesc.Streams[2], Tunnel_StreamMount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelStreamMountClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tunnel_StreamMountClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type tunnelStreamMountClient struct {
	grpc.ClientStream
}

func (x *tunnelStreamMountClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TunnelServer is the server API for Tunnel service.
// All implementations must embed UnimplementedTunnelServer
// for forward compatibility
type TunnelServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	Log(context.Context, *LogMessage) (*Empty, error)
	SendResult(context.Context, *Message) (*Empty, error)
	DockerCredentials(context.Context, *Message) (*Message, error)
	GitCredentials(context.Context, *Message) (*Message, error)
	GitSSHSignature(context.Context, *Message) (*Message, error)
	GitUser(context.Context, *Empty) (*Message, error)
	ForwardPort(context.Context, *ForwardPortRequest) (*ForwardPortResponse, error)
	StopForwardPort(context.Context, *StopForwardPortRequest) (*StopForwardPortResponse, error)
	StreamGitClone(*Empty, Tunnel_StreamGitCloneServer) error
	StreamWorkspace(*Empty, Tunnel_StreamWorkspaceServer) error
	StreamMount(*StreamMountRequest, Tunnel_StreamMountServer) error
	mustEmbedUnimplementedTunnelServer()
}

// UnimplementedTunnelServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelServer struct {
}

func (UnimplementedTunnelServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTunnelServer) Log(context.Context, *LogMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedTunnelServer) SendResult(context.Context, *Message) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResult not implemented")
}
func (UnimplementedTunnelServer) DockerCredentials(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DockerCredentials not implemented")
}
func (UnimplementedTunnelServer) GitCredentials(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GitCredentials not implemented")
}
func (UnimplementedTunnelServer) GitSSHSignature(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GitSSHSignature not implemented")
}
func (UnimplementedTunnelServer) GitUser(context.Context, *Empty) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GitUser not implemented")
}
func (UnimplementedTunnelServer) ForwardPort(context.Context, *ForwardPortRequest) (*ForwardPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardPort not implemented")
}
func (UnimplementedTunnelServer) StopForwardPort(context.Context, *StopForwardPortRequest) (*StopForwardPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopForwardPort not implemented")
}
func (UnimplementedTunnelServer) StreamGitClone(*Empty, Tunnel_StreamGitCloneServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGitClone not implemented")
}
func (UnimplementedTunnelServer) StreamWorkspace(*Empty, Tunnel_StreamWorkspaceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWorkspace not implemented")
}
func (UnimplementedTunnelServer) StreamMount(*StreamMountRequest, Tunnel_StreamMountServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMount not implemented")
}
func (UnimplementedTunnelServer) mustEmbedUnimplementedTunnelServer() {}

// UnsafeTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServer will
// result in compilation errors.
type UnsafeTunnelServer interface {
	mustEmbedUnimplementedTunnelServer()
}

func RegisterTunnelServer(s grpc.ServiceRegistrar, srv TunnelServer) {
	s.RegisterService(&Tunnel_ServiceDesc, srv)
}

func _Tunnel_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Log(ctx, req.(*LogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_SendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).SendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_SendResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).SendResult(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_DockerCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).DockerCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_DockerCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).DockerCredentials(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GitCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GitCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_GitCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GitCredentials(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GitSSHSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GitSSHSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_GitSSHSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GitSSHSignature(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_GitUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GitUser(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_ForwardPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).ForwardPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_ForwardPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).ForwardPort(ctx, req.(*ForwardPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_StopForwardPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopForwardPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).StopForwardPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_StopForwardPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).StopForwardPort(ctx, req.(*StopForwardPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_StreamGitClone_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TunnelServer).StreamGitClone(m, &tunnelStreamGitCloneServer{ServerStream: stream})
}

type Tunnel_StreamGitCloneServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type tunnelStreamGitCloneServer struct {
	grpc.ServerStream
}

func (x *tunnelStreamGitCloneServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Tunnel_StreamWorkspace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TunnelServer).StreamWorkspace(m, &tunnelStreamWorkspaceServer{ServerStream: stream})
}

type Tunnel_StreamWorkspaceServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type tunnelStreamWorkspaceServer struct {
	grpc.ServerStream
}

func (x *tunnelStreamWorkspaceServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Tunnel_StreamMount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMountRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TunnelServer).StreamMount(m, &tunnelStreamMountServer{ServerStream: stream})
}

type Tunnel_StreamMountServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type tunnelStreamMountServer struct {
	grpc.ServerStream
}

func (x *tunnelStreamMountServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

// Tunnel_ServiceDesc is the grpc.ServiceDesc for Tunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Tunnel_Ping_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _Tunnel_Log_Handler,
		},
		{
			MethodName: "SendResult",
			Handler:    _Tunnel_SendResult_Handler,
		},
		{
			MethodName: "DockerCredentials",
			Handler:    _Tunnel_DockerCredentials_Handler,
		},
		{
			MethodName: "GitCredentials",
			Handler:    _Tunnel_GitCredentials_Handler,
		},
		{
			MethodName: "GitSSHSignature",
			Handler:    _Tunnel_GitSSHSignature_Handler,
		},
		{
			MethodName: "GitUser",
			Handler:    _Tunnel_GitUser_Handler,
		},
		{
			MethodName: "ForwardPort",
			Handler:    _Tunnel_ForwardPort_Handler,
		},
		{
			MethodName: "StopForwardPort",
			Handler:    _Tunnel_StopForwardPort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGitClone",
			Handler:       _Tunnel_StreamGitClone_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamWorkspace",
			Handler:       _Tunnel_StreamWorkspace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMount",
			Handler:       _Tunnel_StreamMount_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}
